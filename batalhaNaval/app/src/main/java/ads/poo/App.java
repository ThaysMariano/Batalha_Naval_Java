/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ads.poo;

import edu.princeton.cs.algs4.Draw;
import edu.princeton.cs.algs4.StdOut;

import java.awt.*;
import java.util.Scanner;

public class App {

    private static Draw draw;
    private Jogador jogador;
    private Computador computador;
    private boolean naviosJogador = false;      //Se o navio do jogador ja foi posicionado
    private boolean naviosComputador = false;   //Se o navio do computador ja foi posicionado
    private static int partidas;                //Numero de partidas jogadas
    private static int vitoriasJogador;         //Numero de vitorias do jogador
    private static int vitoriasComputador;      //Numero de vitorias do Computador

    //Tamanhos da janela e grade definidos
    private int xInicioGradeJogador = 50;
    private int yInicioGradeJogador = 100;
    private int xInicioGradeComputador = 550;
    private int yInicioGradeComputador = 100;
    private int larguraJanela = 1000;
    private int alturaJanela = 600;

    //numero de navios na partida
    private int numNavios = 5;

//----------------------------------------------------------------------------------------------


    public App() {
        this.draw = new Draw();
        draw.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        this.draw.setCanvasSize(larguraJanela, alturaJanela);
        this.draw.setXscale(0, larguraJanela);
        this.draw.setYscale(0, alturaJanela);
    }

    //Pegar a resposta e decidir o que fazer
    public static boolean jogarNovamente(int r, Scanner teclado) {
        if (r == 0) {
            //mostrar estatisticas
            return false;
        } else if (r == 1) {
            draw.clear(Color.white);
            //redesenhar grades
            return true;
        } else {
            while (r < 0 || r > 1) {
                System.out.println("Valor inválido");
                r = teclado.nextInt();
            }
            return false;
        }
    }

    //Tranformar letra para numero em Y
    public static int tranformarLetras(String y) {
        int valorLetra;
        switch (y) {
            case "A", "a" -> valorLetra = 1;
            case "B", "b" -> valorLetra = 2;
            case "C", "c" -> valorLetra = 3;
            case "D", "d" -> valorLetra = 4;
            case "E", "e" -> valorLetra = 5;
            case "F", "f" -> valorLetra = 6;
            case "G", "g" -> valorLetra = 7;
            case "H", "h" -> valorLetra = 8;
            case "I", "i" -> valorLetra = 9;
            case "J", "j" -> valorLetra = 10;
            default -> valorLetra = 0;
        }
        return valorLetra;
    }

//Alternar quem inicia a partida
    public void definirBooleanQuemInicia(){
        int q = 0;
        boolean quemJoga;
        if (q % 2 == 0) {
            q++;
            quemJoga = false;
        } else {
            q++;
            quemJoga = true;
        }
    }

//Gerar estatisticas
    public static void estatisticas(){
        System.out.printf("""
        ------- Estatísticas ------

        Partidas jogadas: %d
        Vitórias do Jogador: %d
        Vitórias do Computador: %d

        ---------------------------
        """, getPartidas(),getVitoriasJogador(), getVitoriasComputador() );

    }

//Incrementar pastidas e vitorias
    public static int incrementarPartidas() {return partidas = partidas + 1;}

    public static int incrementarVitoriasJ() {return vitoriasJogador += 1;}

    public static int incrementarVitoriasC() {return vitoriasComputador += 1;}

//Getters e Setters
    public static int getPartidas() {
        return partidas;
    }

    public static int getVitoriasJogador() {
        return vitoriasJogador;
    }

    public static int getVitoriasComputador() {
        return vitoriasComputador;
    }

    public int getNumNavios() {return numNavios;}

    public int getxInicioGradeJogador() {return xInicioGradeJogador;}

    public int getyInicioGradeJogador() {return yInicioGradeJogador;}

    public int getxInicioGradeComputador() {return xInicioGradeComputador;}

    public int getyInicioGradeComputador() {return yInicioGradeComputador;}

    public boolean isNaviosJogador() {
        return naviosJogador;
    }

    public boolean isNaviosComputador() {
        return naviosComputador;
    }

    public void setNaviosJogador(boolean naviosJogador) {
        this.naviosJogador = naviosJogador;
    }

    public void setNaviosComputador(boolean naviosComputador) {
        this.naviosComputador = naviosComputador;
    }


    public static void main(String[] args) {

        Scanner teclado = new Scanner(System.in);

        App app = new App();

        //Criacao das grades
        Grade gJogador = new Grade(app.getxInicioGradeJogador(), app.getyInicioGradeJogador());
        Grade gComputador = new Grade(app.getxInicioGradeComputador(), app.getyInicioGradeComputador());


        // Guardar o nome do jogador
        System.out.println("Digite seu nome de jogador");
        String n = teclado.nextLine();
        System.out.println("Por favor ative o Caps Lock");

        //variaveis de inicio de jogo
        int r = 1;
        boolean quemJoga = true; //true jogador inicia


        // Loop do jogo
        while (r == 1) {
            //Itens criados a cada nova partida
            Jogador j = new Jogador();
            Computador c = new Computador();

            //desenhar grades e nomes
            gJogador.desenharGrade(app.draw);
            gComputador.desenharGrade(app.draw);
            app.draw.setPenColor(Color.black);
            app.draw.text(app.getxInicioGradeJogador() + gJogador.getLinhas() * gJogador.getCelula() / 2, app.getyInicioGradeJogador() + gJogador.getLinhas() * gJogador.getCelula() + gJogador.getCelula(), n);
            app.draw.text(app.getxInicioGradeComputador() + gComputador.getLinhas() * gComputador.getCelula() / 2, app.getyInicioGradeComputador() + gComputador.getLinhas() * gComputador.getCelula() + gComputador.getCelula(), "Computador");

            //incrementar partida e zerar navios colocados
            app.incrementarPartidas();
            int naviosPosicionados = 0;


            //Posicionar navios
            while (naviosPosicionados < app.getNumNavios()) {

                app.naviosJogador = false;
                app.naviosComputador = false;


                System.out.println("Digite o valor X para posicionar o navio");
                int x = teclado.nextInt();
                teclado.nextLine();
                while (x > 10 || x < 1) {
                    System.out.println("Valor inválido para X, por favor reescreva");
                    x = teclado.nextInt();
                    teclado.nextLine();
                }

                System.out.println("Digite o valor Y para posicionar o navio");
                String y = teclado.nextLine();
                while (tranformarLetras(y) == 0) {
                    System.out.println("valor inválido para Y, por favor reescreva");
                    y = teclado.nextLine();
                    teclado.nextLine();
                }

                System.out.println("Digite o tipo do navio que deseja posicionar (P, N, S, E, ou C)");
                String t = teclado.nextLine();
                while (true) {
                    if ((t.equals("P") || t.equals("N") || t.equals("E") || t.equals("S") || t.equals("C") || t.equals("p") || t.equals("n") || t.equals("s") || t.equals("e")) || t.equals("c")) {//minusc
                        if (j.verificarNavio(t)) {
                            break;
                        }
                    }
                    System.out.println("Valor inválido de navio ou navio repetido, por favor reescreva o tipo");
                    t = teclado.nextLine();
                    teclado.nextLine();
                }

                System.out.println("Digite a orientação do navio: vertical(0) ou horizontal(1)");
                int h = teclado.nextInt();
                while (h < 0 || h > 1) {
                    System.out.println("Valor inválido para orientação do navio, por favor reescreva");
                    h = teclado.nextInt();
                    teclado.nextLine();
                }

                boolean horizontal;
                if (h == 0) {
                    horizontal = false;
                } else {
                    horizontal = true;
                }

                //posicionamento dos navios do jogador
                if (j.posicionarNavio(x, tranformarLetras(y), horizontal, t, app.draw, gJogador)) {
                    System.out.println("Navio posicionado!");
                    app.setNaviosJogador(true);
                }else{
                    System.out.println("Navio inválido, por favor reescreva");
                }

                //posicionamento dos navios do computador, so posiciona se o jogador colocar um valido
                if (!app.isNaviosJogador()) {
                    app.setNaviosComputador(true);
                }
                while (!app.isNaviosComputador()) {
                    if (c.posicionarNavioComputador(app.draw, gComputador)) {
                        app.setNaviosComputador(true);
                    }
                }
                if (app.isNaviosComputador() && app.isNaviosJogador()) {
                    naviosPosicionados++;
                }
            }

            // Definir posicao tiros e se a partida finalizou
            while (true) {
                while (true) {
                    if (quemJoga) {
                        System.out.println("Digite a posição X que deseja atirar");
                        int x = teclado.nextInt();
                        teclado.nextLine();
                        while (x > 10 || x < 1) {
                            System.out.println("Valor inválido para X, reescreva");
                            x = teclado.nextInt();
                            teclado.nextLine();
                        }

                        System.out.println("Digite a posição Y que deseja atirar");
                        String y = teclado.nextLine();
                        while (app.tranformarLetras(y) == 0) {
                            System.out.println("valor errado para Y, reescreva");
                            y = teclado.nextLine();
                            teclado.nextLine();
                        }


                        //Vez do jogador atirar:
                        if (c.verificarTiroNaPosicao(x, app.tranformarLetras(y))) {
                            c.analisarTiro(x, app.tranformarLetras(y), app.draw, gComputador);
                                quemJoga = false;
                                break;
                        } else {
                            System.out.println("Tiro repetido, reescreva as posições");
                        }
                    }
                        //vez do computador atirar
                        if (!quemJoga) {
                            j.analisarTiro(app.draw, gJogador);
                            quemJoga = true;
                        }
                }

                //Verificao se alguem ganhou o jogo
                if (j.getNaviosAfundados() == app.numNavios) {
                    System.out.println("Fim de jogo, Computador ganhou ");
                    app.incrementarVitoriasC();

                    System.out.println("Digite 1 para jogar novamente ou 0 para fechar o jogo");
                    r = teclado.nextInt();
                    app.jogarNovamente(r, teclado);
                    if (app.jogarNovamente(r, teclado)) {
                        app.definirBooleanQuemInicia();
                        break;
                    } else {
                       estatisticas();
                       break;
                    }
                }

                if (c.getNaviosAfundados() == app.numNavios) {
                    System.out.println("Fim de Jogo "+n+" ganhou");
                    app.incrementarVitoriasJ();

                    System.out.println("Digite 1 para jogar novamente ou 0 para fechar o jogo");
                    r = teclado.nextInt();
                    app.jogarNovamente(r, teclado);
                    if (app.jogarNovamente(r, teclado)) {
                        app.definirBooleanQuemInicia();
                        break;
                    } else {
                        estatisticas();
                        break;
                    }
                }
            }
        }
        System.out.println("Obrigado por jogar!");
    }
}
